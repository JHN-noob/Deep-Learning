import torch
import numpy as np
import pandas as pd
import torch.nn as nn
import torch.nn.functional as F
import plotly.graph_objects as go
import plotly.offline as pyo
pyo.init_notebook_mode()
from sklearn.datasets import load_diabetes
diabetes_data = load_diabetes()

# 데이터 세트에 대한 설명(당뇨병 데이터)
# print(diabetes_data.DESCR)

x = torch.from_numpy(np.array(diabetes_data.data[:, :-1], dtype=np.float32))
y = torch.from_numpy(np.array(diabetes_data.data[:, [-1]], dtype=np.float32))
# 넘파이로 가져와서 파이토치 텐서로 변환한다

# print('shape of x is : ', x.shape)
# print('shape of x is : ', y.shape)

class LinearRegressionModel(nn.Module):
    def __init__(self, input_dim, output_dim):
        super().__init__()
        self.linear = nn.Linear(input_dim, output_dim)

    def forward(self, x):
        return self.linear(x)

model = LinearRegressionModel(x.size(1), y.size(1)) # 9, 1

learning_rate = 0.01
nb_epochs = 10000
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

for epoch in range(nb_epochs+1):
    pred = model(x)
    loss = F.mse_loss(pred, y)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

print(loss)
for param in model.parameters():
    print(param)

df = pd.DataFrame(torch.cat([y, pred], dim=1).detach_().numpy(), columns=["y", "pred"])

fig = go.Figure()

fig.add_trace(go.Scatter(x=df.index, y=df['y'], mode='markers', name='y'))
fig.add_trace(go.Scatter(x=df.index, y=df['pred'], mode='markers', name='pred'))

fig.update_layout(yaxis_range=[-0.2, 0.2])
fig.show()
